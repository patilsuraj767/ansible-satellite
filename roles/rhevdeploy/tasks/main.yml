---
# tasks file for rhevdeploy

- include: selecthost.yml
  loop: ["341b305a-e753-4ddf-bf17-218db846ce4d","15a40c8b-fe81-4d0a-a48f-0fff9f648698", "96532cc7-9476-4550-867b-63dfd31cb87c","efb81b1e-8a83-46c9-8976-e698adc9641c", "c22fafca-754a-4a6d-8d0c-22eae3397fad", "e9f8c9d0-6dc4-489e-ab14-9b2e868f415e", "e459bb7d-015f-4dd8-8e3e-e0b50bb04b8d", "80aea487-78af-4772-89d5-72a66e8f3067"]
  tags: gethost

- fail:
    msg: "There is no Free Memory/RAM on RHEV"
  when: var2 is not defined

- name: Create VM on RHEV
  uri:
    url: "{{ rhevurl }}/vms"
    method: POST
    user: "{{ rhevusername }}"
    password: "{{ rhevpassword }}"
    body: "<vm><name>{{ vmname }}</name><description>Satellite</description><cluster><name>Test</name></cluster><template><name>RHEL7.2</name></template><memory>9589934592</memory><os><boot><devices><device>hd</device></devices></boot></os><placement_policy><affinity>migratable</affinity><hosts><host id='{{var2}}' /></hosts></placement_policy><memory_policy><ballooning>true</ballooning><guaranteed>5073741824</guaranteed></memory_policy></vm>"
    return_content: yes
    status_code: 202, 200
    headers:
      Version: 4
      Accept: "application/xml"
      Content-type: application/xml
  register: vmcreated

- name: Retrive VM ID
  xml:
    xmlstring: "{{ vmcreated.content }}"
    xpath: /vm
    content: attribute
    attribute: id
  register: vmid

- pause:
    seconds: 40

- include: storagedomain.yml
  loop: ["7649aea2-d87c-4066-acca-4399d5261ade","40cceee7-a8d3-45af-a2d0-70c414be32cc", "a81411b0-4ddb-4467-a4c6-ac9364905248","b288c547-231c-44b9-8329-98adcbdfc726", "8cdef991-3edc-4c35-9228-feeef8f29004", "837a2e1b-6365-4309-a526-0cd05801fe43", "8981bf82-a1da-405e-a7f5-d84f2c94d71d", "7a9e3904-e37b-48fd-b850-0f026dc5cde9"]
  tags: storagedomain

- fail:
    msg: "There is no Storage on RHEV"
  when: var1 is not defined

- name: API storage name. 
  uri:
    url: "{{ rhevurl }}/storagedomains/{{ var1 }}"
    method: GET
    user: "{{ rhevusername }}"
    password: "{{ rhevpassword }}"   
    return_content: yes
    headers:
      Version: 4
      Accept: "application/xml"
      Content-type: application/xml
  register: storagedomainapi

- name: Retrive storage domain name
  xml:
    xmlstring: "{{ storagedomainapi.content }}"
    xpath: /storage_domain/name
    content: text
  register: storagedomainname


- name: Adding 80GB storage 
  uri: 
    url: "{{ rhevurl }}/vms/{{ vmid.matches[0].vm.id }}/diskattachments"
    method: POST
    user: "{{ rhevusername }}"
    password: "{{ rhevpassword }}"
    return_content: yes
    body: "<disk_attachment><bootable>false</bootable><interface>virtio_scsi</interface><active>true</active><disk><description>extra80gb</description><format>cow</format><name>extra</name><provisioned_size>80589934592</provisioned_size><storage_domains><storage_domain><name>{{ storagedomainname.matches[0].name }}</name></storage_domain></storage_domains></disk></disk_attachment>"
    status_code: 201, 200
    headers:
      Version: 4
      Accept: "application/xml"
      Content-type: "application/xml"

- pause:
    seconds: 30

- name: Starting VM 
  uri: 
    url: "{{ rhevurl }}/vms/{{ vmid.matches[0].vm.id }}/start"
    method: POST
    user: "{{ rhevusername }}"
    password: "{{ rhevpassword }}"
    return_content: yes
    body: "<action/>"
    headers:
      Version: 4
      Accept: "application/xml"
      Content-type: "application/xml"

- pause:
    minutes: 2

- name: Getting NIC details of the system.
  tags: nicdata
  uri:
    url: "{{ rhevurl }}/vms/{{ vmid.matches[0].vm.id }}/nics"
    method: GET
    user: "{{ rhevusername }}"
    password: "{{ rhevpassword }}"   
    return_content: yes
    headers:
      Version: 4
      Accept: "application/xml"
      Content-type: application/xml
  register: vmnicdata
  
- name: Nic details
  debug:
      var: vmnicdata

- name: Retriving IP address of the system.
  xml:
    xmlstring: "{{ vmnicdata.content }}"
    xpath: /nics/nic/reported_devices/reported_device/ips/ip[0]/address
    content: text
  register: vmnicip
  tags: nicdata

- name: Perforing reverse-dns and getting the hostname
  debug: msg="{{ lookup('dig', ''~vmnicip.matches[0].address~'/PTR') }}"
  register: hostname
  tags: nicdata

- name: Adding system to the Ansible Inventory.
  add_host:
    name: "{{ hostname.msg }}"
