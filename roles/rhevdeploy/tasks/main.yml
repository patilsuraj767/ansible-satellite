---
# tasks file for rhevdeploy

- name: Create VM on RHEV
  uri:
    url: "{{ rhevurl }}/vms"
    method: POST
    user: "{{ rhevusername }}"
    password: "{{ rhevpassword }}"
    body: "<vm><name>{{ vmname }}</name><description>Satellite</description><cluster><name>Test</name></cluster><template><name>RHEL7.2</name></template><memory>8589934592</memory><os><boot><devices><device>hd</device></devices></boot></os></vm>"
    return_content: yes
    status_code: 202, 200
    headers:
      Version: 4
      Accept: "application/xml"
      Content-type: application/xml
  register: vmcreated

- name: Retrive VM ID
  xml:
    xmlstring: "{{ vmcreated.content }}"
    xpath: /vm
    content: attribute
    attribute: id
  register: vmid

- pause:
    seconds: 40

- name: Adding 80GB storage 
  uri: 
    url: "{{ rhevurl }}/vms/{{ vmid.matches[0].vm.id }}/diskattachments"
    method: POST
    user: "{{ rhevusername }}"
    password: "{{ rhevpassword }}"
    return_content: yes
    body: "<disk_attachment><bootable>false</bootable><interface>virtio_scsi</interface><active>true</active><disk><description>extra80gb</description><format>cow</format><name>extra</name><provisioned_size>80589934592</provisioned_size><storage_domains><storage_domain><name>6pnq2-test-vm-storage6</name></storage_domain></storage_domains></disk></disk_attachment>"
    status_code: 201, 200
    headers:
      Version: 4
      Accept: "application/xml"
      Content-type: "application/xml"

- pause:
    seconds: 30

- name: Starting VM 
  uri: 
    url: "{{ rhevurl }}/vms/{{ vmid.matches[0].vm.id }}/start"
    method: POST
    user: "{{ rhevusername }}"
    password: "{{ rhevpassword }}"
    return_content: yes
    body: "<action/>"
    headers:
      Version: 4
      Accept: "application/xml"
      Content-type: "application/xml"

- pause:
    minutes: 2

- name: Getting NIC details of the system.
  tags: nicdata
  uri:
    url: "{{ rhevurl }}/vms/{{ vmid.matches[0].vm.id }}/nics"
    method: GET
    user: "{{ rhevusername }}"
    password: "{{ rhevpassword }}"   
    return_content: yes
    headers:
      Version: 4
      Accept: "application/xml"
      Content-type: application/xml
  register: vmnicdata

- name: Retriving IP address of the system.
  xml:
    xmlstring: "{{ vmnicdata.content }}"
    xpath: /nics/nic/reported_devices/reported_device/ips/ip/address
    content: text
  register: vmnicip
  tags: nicdata

- name: Perforing reverse-dns and getting the hostname
  debug: msg="{{ lookup('dig', ''~vmnicip.matches[0].address~'/PTR') }}"
  register: hostname
  tags: nicdata

#Below API returns Error 401 Authentication credentials were not provided. To establish a login session

# - name: Adding system to the Ansible Inventory.
#   uri:
#     url: "{{ awxurl }}/inventories/2/hosts/"    
#     method: GET
#     user: inventoryuser
#     password: test 
#     body: '{"name": "vm251-3333.gsslab.pnq2.redhat.com."}'
#     headers:
#       Content-type: application/json
#     tags: add-host-to-ansible

######### ERROR LOG from tower ########################
#2018-11-08 18:54:40,392 INFO     awx.api.generics status 401 received by user AnonymousUser attempting to access /api/v2/inventories/2/hosts/ from 10.40.204.39
#[pid: 134|app: 0|req: 4/12] 10.40.204.39 () {38 vars in 539 bytes} [Thu Nov  8 18:54:40 2018] POST /api/v2/inventories/2/hosts/ => generated 107 bytes in 63 msecs (HTTP/1.1 401) 9 headers in 311 bytes (1 switches on core 0)
#10.40.204.39 - - [08/Nov/2018:18:54:40 +0000] "POST /api/v2/inventories/2/hosts/ HTTP/1.1" 401 107 "-" "ansible-httpget" "-"
############################################



# Alternate to the above API call.. 
# using internal bridge connection 172.17.0.5:8052, unable to use docker host IP or hostname(vm251-89.gsslab.pnq2.redhat.com) | Throwing error no route to host. | Need to be fixed. Something wrong with the docker bridge

- name:
  command: curl -k -X POST -H "Content-Type:application/json" -u inventoryuser:test http://172.17.0.5:8052/api/v2/inventories/2/hosts/ -d '{"name":"{{ hostname.msg }}"}' 
  args:
    warn: no


