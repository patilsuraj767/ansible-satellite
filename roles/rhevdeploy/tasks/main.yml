---

- name: Create VM on RHEV
  uri:
    url: "{{ rhevurl }}/vms"
    method: POST
    user: "{{ rhevusername }}"
    password: "{{ rhevpassword }}"
    body: "<vm><name>{{ vmname }}</name><description>Satellite</description><cluster><name>Test</name></cluster><template><name>RHEL7.2</name></template><memory>9589934592</memory><os><boot><devices><device>hd</device></devices></boot></os><placement_policy><affinity>migratable</affinity><hosts><host id='{{host_id}}' /></hosts></placement_policy><memory_policy><ballooning>true</ballooning><guaranteed>5073741824</guaranteed></memory_policy></vm>"
    return_content: yes
    status_code: 202, 200
    headers:
      Version: 4
      Accept: "application/xml"
      Content-type: application/xml
  register: vmcreated

- name: Retrive VM ID
  xml:
    xmlstring: "{{ vmcreated.content }}"
    xpath: /vm
    content: attribute
    attribute: id
  register: vmid

- pause:
    seconds: 40


- name: API storage name. 
  uri:
    url: "{{ rhevurl }}/storagedomains/{{ storagedomain_id }}"
    method: GET
    user: "{{ rhevusername }}"
    password: "{{ rhevpassword }}"   
    return_content: yes
    headers:
      Version: 4
      Accept: "application/xml"
      Content-type: application/xml
  register: storagedomainapi

- name: Retrive storage domain name
  xml:
    xmlstring: "{{ storagedomainapi.content }}"
    xpath: /storage_domain/name
    content: text
  register: storagedomainname


- name: Adding 80GB storage 
  uri: 
    url: "{{ rhevurl }}/vms/{{ vmid.matches[0].vm.id }}/diskattachments"
    method: POST
    user: "{{ rhevusername }}"
    password: "{{ rhevpassword }}"
    return_content: yes
    body: "<disk_attachment><bootable>false</bootable><interface>virtio_scsi</interface><active>true</active><disk><description>extra80gb</description><format>cow</format><name>extra</name><provisioned_size>80589934592</provisioned_size><storage_domains><storage_domain><name>{{ storagedomainname.matches[0].name }}</name></storage_domain></storage_domains></disk></disk_attachment>"
    status_code: 201, 200
    headers:
      Version: 4
      Accept: "application/xml"
      Content-type: "application/xml"

- pause:
    seconds: 30

- name: Starting VM 
  uri: 
    url: "{{ rhevurl }}/vms/{{ vmid.matches[0].vm.id }}/start"
    method: POST
    user: "{{ rhevusername }}"
    password: "{{ rhevpassword }}"
    return_content: yes
    body: "<action/>"
    headers:
      Version: 4
      Accept: "application/xml"
      Content-type: "application/xml"

- pause:
    minutes: 5

- name: Getting NIC details of the system.
  tags: nicdata
  uri:
    url: "{{ rhevurl }}/vms/{{ vmid.matches[0].vm.id }}/nics"
    method: GET
    user: "{{ rhevusername }}"
    password: "{{ rhevpassword }}"   
    return_content: yes
    headers:
      Version: 4
      Accept: "application/xml"
      Content-type: application/xml
  register: vmnicdata
  
- name: Retriving IP address of the system.
  xml:
    xmlstring: "{{ vmnicdata.content }}"
    xpath: /nics/nic/reported_devices/reported_device/ips/ip[1]/address
    content: text
  register: vmnicip
  tags: nicdata

- name: Nic details
  tags: nicdata
  debug:
      var: vmnicip.matches[0].address

- name: Perforing reverse-dns and getting the hostname
  debug: msg="{{ lookup('dig', ''~vmnicip.matches[0].address~'/PTR') }}"
  register: hostname
  tags: nicdata

- name: Adding system to the Ansible Inventory.
  add_host:
    name: "{{ hostname.msg }}"
